{"ast":null,"code":"import _objectSpread from \"C:\\\\dev\\\\fullstack\\\\part6\\\\anecdotes\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport anecdotesService from \"../services/anecdotes\";\n\nconst getId = () => (100000 * Math.random()).toFixed(0);\n\nexport const vote = id => {\n  return {\n    type: \"VOTE\",\n    data: {\n      id\n    }\n  };\n};\nexport const create = content => {\n  return {\n    type: \"CREATE\",\n    data: {\n      content\n    }\n  };\n};\nexport const initialize = data => {\n  return async dispatch => {\n    dispatch({\n      type: \"INIT\",\n      data\n    });\n  };\n};\n\nconst reducer = (state = [], action) => {\n  console.log('state now: ', state);\n  console.log('action', action);\n\n  switch (action.type) {\n    case \"VOTE\":\n      const anecdoteToChange = state.find(i => i.id === action.data.id);\n\n      const changedAnecdote = _objectSpread({}, anecdoteToChange, {\n        votes: anecdoteToChange.votes + 1\n      });\n\n      return state.map(i => i.id === action.data.id ? changedAnecdote : i);\n\n    case \"CREATE\":\n      const newAnecdote = {\n        content: action.data.content,\n        id: getId(),\n        votes: 0\n      };\n      anecdotesService.createAnecdote(newAnecdote);\n      return [...state, newAnecdote];\n\n    case \"INIT\":\n      return action.data;\n\n    default:\n  }\n\n  return state;\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:\\dev\\fullstack\\part6\\anecdotes\\src\\reducers\\anecdoteReducer.js"],"names":["anecdotesService","getId","Math","random","toFixed","vote","id","type","data","create","content","initialize","dispatch","reducer","state","action","console","log","anecdoteToChange","find","i","changedAnecdote","votes","map","newAnecdote","createAnecdote"],"mappings":";AAAA,OAAOA,gBAAP,MAA6B,uBAA7B;;AAEA,MAAMC,KAAK,GAAG,MAAM,CAAC,SAASC,IAAI,CAACC,MAAL,EAAV,EAAyBC,OAAzB,CAAiC,CAAjC,CAApB;;AAEA,OAAO,MAAMC,IAAI,GAAIC,EAAD,IAAO;AACzB,SAAM;AACJC,IAAAA,IAAI,EAAE,MADF;AAEJC,IAAAA,IAAI,EAAC;AACHF,MAAAA;AADG;AAFD,GAAN;AAMD,CAPM;AASP,OAAO,MAAMG,MAAM,GAAIC,OAAD,IAAY;AAChC,SAAM;AACJH,IAAAA,IAAI,EAAC,QADD;AAEJC,IAAAA,IAAI,EAAC;AACHE,MAAAA;AADG;AAFD,GAAN;AAMD,CAPM;AASP,OAAO,MAAMC,UAAU,GAAIH,IAAD,IAAS;AACjC,SAAO,MAAMI,QAAN,IAAiB;AACtBA,IAAAA,QAAQ,CAAC;AACPL,MAAAA,IAAI,EAAE,MADC;AAEPC,MAAAA;AAFO,KAAD,CAAR;AAID,GALD;AAMD,CAPM;;AASP,MAAMK,OAAO,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACtCC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,KAA3B;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,MAAtB;;AAEA,UAAOA,MAAM,CAACR,IAAd;AACE,SAAK,MAAL;AACE,YAAMW,gBAAgB,GAAGJ,KAAK,CAACK,IAAN,CAAWC,CAAC,IAAIA,CAAC,CAACd,EAAF,KAASS,MAAM,CAACP,IAAP,CAAYF,EAArC,CAAzB;;AACA,YAAMe,eAAe,qBAChBH,gBADgB;AAEnBI,QAAAA,KAAK,EAAEJ,gBAAgB,CAACI,KAAjB,GAAyB;AAFb,QAArB;;AAIA,aAAOR,KAAK,CAACS,GAAN,CAAUH,CAAC,IAAIA,CAAC,CAACd,EAAF,KAASS,MAAM,CAACP,IAAP,CAAYF,EAArB,GAA0Be,eAA1B,GAA4CD,CAA3D,CAAP;;AACF,SAAK,QAAL;AACE,YAAMI,WAAW,GAAG;AAClBd,QAAAA,OAAO,EAAEK,MAAM,CAACP,IAAP,CAAYE,OADH;AAElBJ,QAAAA,EAAE,EAAEL,KAAK,EAFS;AAGlBqB,QAAAA,KAAK,EAAE;AAHW,OAApB;AAMAtB,MAAAA,gBAAgB,CAACyB,cAAjB,CAAgCD,WAAhC;AAEA,aAAO,CAAC,GAAGV,KAAJ,EAAWU,WAAX,CAAP;;AACF,SAAK,MAAL;AACE,aAAOT,MAAM,CAACP,IAAd;;AACF;AApBF;;AAuBA,SAAOM,KAAP;AACD,CA5BD;;AA8BA,eAAeD,OAAf","sourcesContent":["import anecdotesService from \"../services/anecdotes\";\n\nconst getId = () => (100000 * Math.random()).toFixed(0);\n\nexport const vote = (id) =>{\n  return{\n    type: \"VOTE\",\n    data:{\n      id\n    }\n  }\n};\n\nexport const create = (content) =>{\n  return{\n    type:\"CREATE\",\n    data:{\n      content\n    }\n  }\n};\n\nexport const initialize = (data) =>{\n  return async dispatch =>{\n    dispatch({\n      type: \"INIT\",\n      data\n    })\n  }\n};\n\nconst reducer = (state = [], action) => {\n  console.log('state now: ', state);\n  console.log('action', action);\n\n  switch(action.type){\n    case \"VOTE\":\n      const anecdoteToChange = state.find(i => i.id === action.data.id);\n      const changedAnecdote = {\n        ...anecdoteToChange,\n        votes: anecdoteToChange.votes + 1\n      };\n      return state.map(i => i.id === action.data.id ? changedAnecdote : i);\n    case \"CREATE\":\n      const newAnecdote = {\n        content: action.data.content,\n        id: getId(),\n        votes: 0\n      };\n\n      anecdotesService.createAnecdote(newAnecdote);\n\n      return [...state, newAnecdote];\n    case \"INIT\":\n      return action.data;\n    default:\n  }\n\n  return state\n};\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}