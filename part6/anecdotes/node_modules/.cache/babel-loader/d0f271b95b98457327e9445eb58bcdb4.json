{"ast":null,"code":"import _objectSpread from \"C:\\\\dev\\\\fullstack\\\\part6\\\\anecdotes\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport anecdotesService from \"../services/anecdotes\";\n\nconst getId = () => (100000 * Math.random()).toFixed(0);\n\nexport const vote = anecdotes => {\n  return async dispatch => {\n    await anecdotesService.vote(anecdotes);\n    dispatch({\n      type: \"VOTE\",\n      data: {\n        id: anecdotes.id\n      }\n    });\n  };\n};\nexport const create = anecdote => {\n  return async dispatch => {\n    const newAnecdote = {\n      content: anecdote,\n      id: getId(),\n      votes: 0\n    };\n    await anecdotesService.createAnecdote(newAnecdote);\n    dispatch({\n      type: \"CREATE\",\n      data: newAnecdote\n    });\n  };\n};\nexport const initialize = () => {\n  return async dispatch => {\n    const content = await anecdotesService.getAll();\n    dispatch({\n      type: \"INIT\",\n      data: content\n    });\n  };\n};\n\nconst reducer = (state = [], action) => {\n  console.log('state now: ', state);\n  console.log('action', action);\n\n  switch (action.type) {\n    case \"VOTE\":\n      const anecdoteToChange = state.find(i => i.id === action.data.id);\n\n      const changedAnecdote = _objectSpread({}, anecdoteToChange, {\n        votes: anecdoteToChange.votes + 1\n      });\n\n      return state.map(i => i.id === action.data.id ? changedAnecdote : i);\n\n    case \"CREATE\":\n      return [...state, action.data];\n\n    case \"INIT\":\n      return action.data;\n\n    default:\n  }\n\n  return state;\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:\\dev\\fullstack\\part6\\anecdotes\\src\\reducers\\anecdoteReducer.js"],"names":["anecdotesService","getId","Math","random","toFixed","vote","anecdotes","dispatch","type","data","id","create","anecdote","newAnecdote","content","votes","createAnecdote","initialize","getAll","reducer","state","action","console","log","anecdoteToChange","find","i","changedAnecdote","map"],"mappings":";AAAA,OAAOA,gBAAP,MAA6B,uBAA7B;;AAEA,MAAMC,KAAK,GAAG,MAAM,CAAC,SAASC,IAAI,CAACC,MAAL,EAAV,EAAyBC,OAAzB,CAAiC,CAAjC,CAApB;;AAEA,OAAO,MAAMC,IAAI,GAAIC,SAAD,IAAe;AACjC,SAAO,MAAMC,QAAN,IAAkB;AACvB,UAAMP,gBAAgB,CAACK,IAAjB,CAAsBC,SAAtB,CAAN;AACAC,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAE,MADC;AAEPC,MAAAA,IAAI,EAAE;AACJC,QAAAA,EAAE,EAAEJ,SAAS,CAACI;AADV;AAFC,KAAD,CAAR;AAMD,GARD;AASD,CAVM;AAYP,OAAO,MAAMC,MAAM,GAAIC,QAAD,IAAa;AACjC,SAAO,MAAML,QAAN,IAAiB;AACtB,UAAMM,WAAW,GAAG;AAClBC,MAAAA,OAAO,EAAEF,QADS;AAElBF,MAAAA,EAAE,EAAET,KAAK,EAFS;AAGlBc,MAAAA,KAAK,EAAE;AAHW,KAApB;AAKA,UAAMf,gBAAgB,CAACgB,cAAjB,CAAgCH,WAAhC,CAAN;AACAN,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAC,QADE;AAEPC,MAAAA,IAAI,EAAEI;AAFC,KAAD,CAAR;AAID,GAXD;AAYD,CAbM;AAeP,OAAO,MAAMI,UAAU,GAAG,MAAK;AAC7B,SAAO,MAAMV,QAAN,IAAiB;AACtB,UAAMO,OAAO,GAAG,MAAMd,gBAAgB,CAACkB,MAAjB,EAAtB;AACAX,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAE,MADC;AAEPC,MAAAA,IAAI,EAAEK;AAFC,KAAD,CAAR;AAID,GAND;AAOD,CARM;;AAUP,MAAMK,OAAO,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACtCC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,KAA3B;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,MAAtB;;AAEA,UAAOA,MAAM,CAACb,IAAd;AACE,SAAK,MAAL;AACE,YAAMgB,gBAAgB,GAAGJ,KAAK,CAACK,IAAN,CAAWC,CAAC,IAAIA,CAAC,CAAChB,EAAF,KAASW,MAAM,CAACZ,IAAP,CAAYC,EAArC,CAAzB;;AACA,YAAMiB,eAAe,qBAChBH,gBADgB;AAEnBT,QAAAA,KAAK,EAAES,gBAAgB,CAACT,KAAjB,GAAyB;AAFb,QAArB;;AAIA,aAAOK,KAAK,CAACQ,GAAN,CAAUF,CAAC,IAAIA,CAAC,CAAChB,EAAF,KAASW,MAAM,CAACZ,IAAP,CAAYC,EAArB,GAA0BiB,eAA1B,GAA4CD,CAA3D,CAAP;;AACF,SAAK,QAAL;AACE,aAAO,CAAC,GAAGN,KAAJ,EAAWC,MAAM,CAACZ,IAAlB,CAAP;;AACF,SAAK,MAAL;AACE,aAAOY,MAAM,CAACZ,IAAd;;AACF;AAZF;;AAeA,SAAOW,KAAP;AACD,CApBD;;AAsBA,eAAeD,OAAf","sourcesContent":["import anecdotesService from \"../services/anecdotes\";\n\nconst getId = () => (100000 * Math.random()).toFixed(0);\n\nexport const vote = (anecdotes) => {\n  return async dispatch => {\n    await anecdotesService.vote(anecdotes);\n    dispatch({\n      type: \"VOTE\",\n      data: {\n        id: anecdotes.id\n      }\n    })\n  }\n};\n\nexport const create = (anecdote) =>{\n  return async dispatch =>{\n    const newAnecdote = {\n      content: anecdote,\n      id: getId(),\n      votes: 0\n    };\n    await anecdotesService.createAnecdote(newAnecdote);\n    dispatch({\n      type:\"CREATE\",\n      data: newAnecdote\n    })\n  }\n};\n\nexport const initialize = () =>{\n  return async dispatch =>{\n    const content = await anecdotesService.getAll();\n    dispatch({\n      type: \"INIT\",\n      data: content\n    })\n  }\n};\n\nconst reducer = (state = [], action) => {\n  console.log('state now: ', state);\n  console.log('action', action);\n\n  switch(action.type){\n    case \"VOTE\":\n      const anecdoteToChange = state.find(i => i.id === action.data.id);\n      const changedAnecdote = {\n        ...anecdoteToChange,\n        votes: anecdoteToChange.votes + 1\n      };\n      return state.map(i => i.id === action.data.id ? changedAnecdote : i);\n    case \"CREATE\":\n      return [...state, action.data];\n    case \"INIT\":\n      return action.data;\n    default:\n  }\n\n  return state\n};\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}